name: macOS app build (PyInstaller) with ffmpeg 8

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

permissions:
  contents: write

jobs:
  ffmpeg:
    name: Fetch ffmpeg v8 (${{ matrix.runner }})
    strategy:
      matrix:
        runner: [ macos-13, macos-14 ]  # x86_64 and arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install ffmpeg via Homebrew
        shell: bash
        run: |
          set -euxo pipefail
          brew update
          brew install ffmpeg
          ffmpeg -version | head -n1
          # Ensure major version 8
          if ! ffmpeg -version | head -n1 | grep -q "ffmpeg version 8"; then
            echo "ffmpeg is not major version 8" >&2
            exit 1
          fi
      - name: Upload ffmpeg binary artifact
        shell: bash
        run: |
          set -euxo pipefail
          arch=$(uname -m)
          bin=$(command -v ffmpeg)
          mkdir -p out out/lib
          cp "$bin" out/ffmpeg
          echo "arch=$arch"
          # Helper to copy a dylib if present
          copy_one() {
            local src="$1"
            if [ -f "$src" ]; then
              echo "copy: $src"
              cp -n "$src" out/lib/ || true
            fi
          }
          # Collect LC_RPATH entries from the binary (used to resolve @rpath)
          mapfile -t RPATHS < <(otool -l "$bin" \
            | awk 'r && /^\tname/ {gsub(/^\tname /,""); print $1} /LC_RPATH/ {r=1} /cmd / && !/LC_RPATH/ {r=0}')
          # Copy dependent dylibs referenced by absolute Homebrew paths
          otool -L "$bin" \
            | tail -n +2 \
            | awk '{print $1}' \
            | while read -r dep; do
                case "$dep" in
                  /opt/homebrew/*|/usr/local/*)
                    copy_one "$dep" || true ;;
                  @rpath/*)
                    name="${dep#@rpath/}"
                    # Try to resolve against each LC_RPATH
                    for rp in "${RPATHS[@]}"; do
                      candidate="$rp/$name"
                      if [ -f "$candidate" ]; then copy_one "$candidate"; break; fi
                    done
                    # Fallback: try Homebrew prefix for the library by guessing formula name
                    base="${name%%.dylib}"
                    base="${base%%.*}"  # strip version suffix like .13
                    if command -v brew >/dev/null 2>&1; then
                      if prefix=$(brew --prefix "$base" 2>/dev/null || true); then
                        [ -d "$prefix/lib" ] && for f in "$prefix"/lib/"$name" "$prefix"/lib/"$base"*.dylib; do [ -f "$f" ] && copy_one "$f"; done
                      fi
                    fi ;;
                esac
              done
          # Second pass: also copy dependencies of the just-copied libs (one level deep)
          if ls out/lib/*.dylib >/dev/null 2>&1; then
            for L in out/lib/*.dylib; do
              otool -L "$L" \
                | tail -n +2 \
                | awk '{print $1}' \
                | while read -r dep; do
                    case "$dep" in
                      /opt/homebrew/*|/usr/local/*)
                        copy_one "$dep" || true ;;
                    esac
                  done
            done
          fi
        # Use upload-artifact v4
      - uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ runner.os }}-${{ matrix.runner }}
          path: out/**
          if-no-files-found: error

  build-intel:
    needs: ffmpeg
    runs-on: macos-13  # build the app on Intel
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt pyinstaller==6.10.0

      - name: Download ffmpeg arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-macOS-macos-14
          path: ffmpeg-arm64
      - name: Download ffmpeg x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-macOS-macos-13
          path: ffmpeg-x86_64

      - name: Place ffmpeg binaries into assets tree
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p assets/ffmpeg/mac/arm64 assets/ffmpeg/mac/x86_64
          cp ffmpeg-arm64/ffmpeg assets/ffmpeg/mac/arm64/ffmpeg
          cp -R ffmpeg-arm64/lib assets/ffmpeg/mac/arm64/ || true
          cp ffmpeg-x86_64/ffmpeg assets/ffmpeg/mac/x86_64/ffmpeg
          cp -R ffmpeg-x86_64/lib assets/ffmpeg/mac/x86_64/ || true
          chmod +x assets/ffmpeg/mac/arm64/ffmpeg assets/ffmpeg/mac/x86_64/ffmpeg
          # Ensure the ffmpeg binary can resolve @rpath to our bundled lib directory at runtime
          install_name_tool -add_rpath '@loader_path/lib' assets/ffmpeg/mac/x86_64/ffmpeg || true
          install_name_tool -add_rpath '@loader_path/lib' assets/ffmpeg/mac/arm64/ffmpeg || true

      - name: Build app
        run: |
          rm -rf build dist || true
          pyinstaller -y --clean pyinstaller.spec

      - name: Zip artifacts (x86_64)
        run: |
          cd dist
          zip -r "DatasetCutter-macOS-app-x86_64.zip" "Dataset Cutter.app"
          zip -r "DatasetCutter-macOS-cli-x86_64.zip" "DatasetCutter"

      - name: Upload build artifacts (x86_64)
        uses: actions/upload-artifact@v4
        with:
          name: DatasetCutter-x86_64
          path: |
            dist/DatasetCutter-macOS-app-x86_64.zip
            dist/DatasetCutter-macOS-cli-x86_64.zip
          if-no-files-found: error

  build-arm:
    needs: ffmpeg
    runs-on: macos-14  # build the app on Apple Silicon
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt pyinstaller==6.10.0

      - name: Download ffmpeg arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-macOS-macos-14
          path: ffmpeg-arm64
      - name: Download ffmpeg x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-macOS-macos-13
          path: ffmpeg-x86_64

      - name: Place ffmpeg binaries into assets tree
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p assets/ffmpeg/mac/arm64 assets/ffmpeg/mac/x86_64
          cp ffmpeg-arm64/ffmpeg assets/ffmpeg/mac/arm64/ffmpeg
          cp -R ffmpeg-arm64/lib assets/ffmpeg/mac/arm64/ || true
          cp ffmpeg-x86_64/ffmpeg assets/ffmpeg/mac/x86_64/ffmpeg
          chmod +x assets/ffmpeg/mac/arm64/ffmpeg assets/ffmpeg/mac/x86_64/ffmpeg
          # Ensure the ffmpeg binary can resolve @rpath to our bundled lib directory at runtime
          install_name_tool -add_rpath '@loader_path/lib' assets/ffmpeg/mac/x86_64/ffmpeg || true
          install_name_tool -add_rpath '@loader_path/lib' assets/ffmpeg/mac/arm64/ffmpeg || true

      - name: Build app
        run: |
          rm -rf build dist || true
          pyinstaller -y --clean pyinstaller.spec

      - name: Zip artifacts (arm64)
        run: |
          cd dist
          zip -r "DatasetCutter-macOS-app-arm64.zip" "Dataset Cutter.app"
          zip -r "DatasetCutter-macOS-cli-arm64.zip" "DatasetCutter"

      - name: Upload build artifacts (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: DatasetCutter-arm64
          path: |
            dist/DatasetCutter-macOS-app-arm64.zip
            dist/DatasetCutter-macOS-cli-arm64.zip
          if-no-files-found: error

  release:
    needs: [build-intel, build-arm]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download intel zips
        uses: actions/download-artifact@v4
        with:
          name: DatasetCutter-x86_64
          path: intel
      - name: Download arm zips
        uses: actions/download-artifact@v4
        with:
          name: DatasetCutter-arm64
          path: arm
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            intel/DatasetCutter-macOS-app-x86_64.zip
            intel/DatasetCutter-macOS-cli-x86_64.zip
            arm/DatasetCutter-macOS-app-arm64.zip
            arm/DatasetCutter-macOS-cli-arm64.zip
